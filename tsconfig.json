{
  "compilerOptions": {
    "target": "esnext", // 指定ECMAScript目标版本
    "allowSyntheticDefaultImports": true, // 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查
    "declaration": true, // 生成相应的 .d.ts文件
    "jsx": "react", // 在 .tsx文件里支持JSX（支持 React）
    "alwaysStrict": true, // 严格模式
    "baseUrl": ".", // 用于解析非相对模块名称的基目录
    "diagnostics": false, // 显示诊断信息
    "esModuleInterop": true, // 更改使TypeScript生成的输出更接近Babel生成的输出
    "module": "esnext", // 指定生成哪个模块系统代码
    "moduleResolution": "node", // 决定如何处理模块
    "newLine": "lf", // 在发出文件时使用指定的行序列末尾:“crlf”(windows)或“lf”(unix)
    "noEmit": true, // 不生成输出文件
    "noUnusedLocals": true, // 若有未使用的局部变量则抛错
    "noUnusedParameters": true, // 若有未使用的参数则抛错
    "paths": { // 模块名称到相对于baseUrl的位置的路径映射条目列表
      "@/*": ["src/*"]
    },
    "pretty": true, // 给错误和消息设置样式，使用颜色和上下文
    "removeComments": true, // 删除所有注释，除了以 /!*开头的版权信息
    "sourceMap": true, // 错误定位在编译前的 ts 文件而不是编译位置
    "strict": true, // 启用所有严格类型检查选项
    "strictNullChecks": true // 严格模式下检测 null
  },
  // "files": ["src/Index.tsx"], // 入口文件  使用此方式或者下面的 include 都可指定  其中一种就好
  "include": ["src/**/*"], // 检测包括 src 目录下的所有 ts 文件
  "exclude": ["node_modules"] // 排除检测 node_modules 下的 ts文件
}
